<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
                                 http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
                                 http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!--
        * servlet-context.xml 파일
        스프링의 핵심 부품인 DispatcherServlet 이 알아야 할 설정들을 등록한 파일
        즉, 요청 처리시 반드시 셋팅해야하는 내용들이 기술되어 있음
     -->
    <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->


    <!-- 코드를 간략하게 줄여주는 annotation -->
    <!-- @Controller, @Service 등과 같이 Spring 에서 제공하는 어노테이션을 쓸 수 있게 활성화 해주는 설정 -->
    <!-- Enables the Spring MVC @Controller programming model -->
    <annotation-driven/>

    <!-- 정적 자원 파일들 (이미지, 폰트, css 파일 등) 을 담아둘 수 있는 resources 폴더의 경로에 대한 설정 -->
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <resources mapping="/resources/**" location="/resources/"/>

    <!--
        beans: 이라는 접두어 => 주소 자동 완성 도구 (== bean == 자바 객체) 를 등록하는 부분
        => View Resolver 라고 부름 (기본적으로 Spring 에서 제공해줌)

        * 설정하는 이유
        매번 응답페이지 리턴 시 (포워딩할 때) "WEB-INF/views/board/boardListView.jsp" 처럼 풀 경로를 적을 때 주소를 자동완성 해주는 도구
        - prefix(접두어) 에 의해 /WEB-INF/views/ 부분이 자동완성 됨
        - suffix(접미어) 에 의해 .jsp 부분이 자동완성 됨
        "board/boardListView.jsp" 이런 식으로만 작성해도 알아서 주소가 자동완성 될 것임!!

        InternalResourceViewResolver 객체에 의해 자동완성 됨
     -->
    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/jsp/"/>
        <beans:property name="suffix" value=".jsp"/>
    </beans:bean>


    <!--
        * component-scan
          base-package 에 작성된 패키지 내부의 모든 클래스들을 스캔하겠다.
          (자동으로 자바 객체 (== 도구 == bean) 가 생성될 수 있게 스캔해주는 역할)
          => bean scanning 이라고 부름
     -->
    <context:component-scan base-package="com.kh.earthball"/>
    <mybatis:scan base-package="com.kh.earthball.**.mapper"/>
    <!--
        * 사실상 사용자가 어떤 url 로 요청 시 해당 이 servlet-context.xml 파일이 읽혀짐
          (즉, 요청과 관련된 모든 설정을 담고 있음)

        만약, 어노테이션 방식이 없었다면 xml 방식으로 MemberController 빈을 등록해야 함
        beans:bean class="~~~" id="~~~"


        * Bean 등록 시, xml 방식의 단점
            : bean 갯수가 늘어날 수록 xml 파일을 관리하기 힘들어짐
            : 여러 개발자가 같은 xml 파일을 수정하게 되면 충돌 발생함


        * Bean 등록 시, 어노테이션 방식
          component-scan 에서 지정한 감시할 패키지명 (base-package) 하위의 모든 클래스들을 다 스캔해서
          @Controller 와 같은 어노테이션이 붙은 클래스를 자동으로 bean 으로 등록해주는 방식

          단, 내가 직접 만든 클래스일 경우에만 어노테이션 사용 가능
              / 내가 직접 만든 클래스가 아닐 경우 컴파일된 class 형식으로 배포되기 때문에 소스코드 내부에 내가 직접 어노테이션을 달 수 없음 => 반드시 xml 형식으로 빈을 등록할 수 밖에 없음!!!
     -->


    <!--
        * 일반 메소드에 HandlerMapping 을 통해서 어떤 url 로 요청 시 어떤 Controller 의 메소드를 호출할 건지 알아내야 함
          (DispatcherServlet 이 알아야 하는 정보)

        - HandlerMapping 을 지정하는 방법
        1. @RequestMapping 어노테이션으로 손쉽게 지정 가능
        2. 요청때마다 실행될 HandlerMapping 관련한 클래스들을 빈으로 등록하기

        beans:bean class="com.kh.spring.member.controller.LoginController" id="loginController"
        ..... 이런식으로 등록을 일일이 해야 함....

        <beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping" />
        login.me 에 해당하는 요청을 LoginController 로 받아주겠다.									=> 옛날 방식!
     -->


    <!-- 인터셉터 등록 -->

</beans:beans>
