<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<!-- xmlns (xml name space) xsi () -->

	<!-- * pom.xml 파일 Maven 을 이용하여 필요한 라이브러리들 (jar 파일들) 을 다운로드 받을 수 있는 파일 *
		pom.xml 파일의 구조 - 프로젝트에 대한 정보 modelVersion : 스프링의 버전 groupId : 이 프로젝트의 2번째
		레벨까지의 패키지명 artifactId : 이 프로젝트의 3번째 레벨의 패키지명 (즉, contextPath 값 == 프로그램명)
		name : 내 프로젝트 명 packaging : 배포될 때의 파일 확장자 형식 (.war 파일로 배포) version : war
		파일의 버전 -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>com</groupId>
	<artifactId>earthball</artifactId>
	<name>EarthBall</name>
	<packaging>war</packaging>
	<version>1.0.0-SNAPSHOT</version>

	<!-- - properties 영역 : 이 pom.xml 파일 내부에서 사용할 환경설정할 내용을 담은 변수들을 지정한 영역 즉,
		태그명이 곧 변수명으로 잡히게 됨 이 문서 내부에서 언제든지 ${변수명(즉, 태그명)} 으로 지정해서 해당 값을 불러올 수 있다. -->
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.3.27</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>

	<!-- - dependencies : 이 프로젝트에서 사용할 라이브러리들의 정보들을 기술하는 곳 즉, 내가 Maven 을 통해서
		다운로드 받고자 하는 jar 파일들의 정보를 담는 영역 => 내가 직접 jar 파일들을 다운로드 받지 않고 Maven 을 통해서 다운로드
		받을 예정임!! (이것을 의존성 라이브러리, 의존성 주입 이라고 부른다) 단, 때에 따라 내가 수동으로 추가하고자 하는 jar 파일이
		있다면 내가 직접 추가도 가능함 이 dependencies 영역에 기술된 jar 파일들은 Package Explorer 의 Maven
		Dependencies 에서 확인 가능 추가적으로 실제 다운로드 된 jar 파일들은 우리가 아까 셋팅했던 repository 폴더에
		담겨있음! -->
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>

		<!-- Logging -->

		<!--
			* Logging
			- 서버에서 필요에 의해 "기록" 을 남기는 행위
			- 기록할 수 있는 곳 : 콘솔, 파일, 이메일 등

			* Logger
			- 필요에 의해 로깅을 자유자재로 수행하는 "도구"
			- 종류 : log4j, logback ...
			=> 스프링 프레임워크에서는 기본적으로 log4j 를 연동해서 제공해준다.
				(단, slf4j 라는 중간다리 역할을 하는 라이브러리 연동 또한 필수)
		 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- 기타 의존성 -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.17.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.17.2</version>
		</dependency>


		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>


		<!-- 추가적으로 필요한 라이브러리 셋팅 -->
		<!-- 1. DB 관련 (오라클, 마이바티스 등) 라이브러리들 -->
		<!-- 1_1. ojdbc6.jar 라이브러리 -->
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>	<!-- 패키지명 -->
			<artifactId>ojdbc6</artifactId>				<!-- jar 파일 이름 -->
			<version>11.2.0.4</version>
		</dependency>

		<!-- 1_2. 스프링에서 JDBC 기능을 사용하기 위한 라이브러리 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

		<!-- 1_3. 순수 MyBatis 라이브러리 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.13</version>
		</dependency>

		<!-- 1_4. 스프링에서 MyBatis 를 이용하기 위한 라이브러리 -->
		<!-- 스프링에서 마이바티스를 연동하려면 추가적으로 해당 라이브러리도 같이 연동해야 함 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>2.0.6</version>
		</dependency>

		<!-- 여기까지가 MyBatis 프레임워크 연동을 위한 부분 -->


		<!-- 1_5. 커넥션 풀을 사용하기 위한 라이브러리 (성능때문에 추가하는 부분) -->
		<!-- Commons DBCP : Database Connection Pooling -->
		<!-- 영속성 작업 시 성능 향상을 위한 라이브러리 -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>


		<!-- 2. Lombok 라이브러리 -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.26</version>
			<scope>provided</scope>
		</dependency>


		<!-- 3. 스프링 시큐리티 관련 모듈 라이브러리들 (core, web, config) -->
		<!-- maven 홈페이지에서 검색 해야 할 것들
			spring-security-core
			spring-security-web
			spring-security-config
			셋의 버전은 꼭 동일하게 맞춰야 함!! ****
		 -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>5.5.2</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>5.5.2</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>5.5.2</version>
		</dependency>


		<!-- 4. 파일업로드 관련 두 개의 라이브러리 연동 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.3</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

		<!-- Ajax 관련 두개의 라이브러리 -->
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.12.0</version>
		</dependency>

		<dependency>
			<groupId>org.bgee.log4jdbc-log4j2</groupId>
			<artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
			<version>1.16</version>
		</dependency>
		
		<!-- 주소를 위도,경도로 받기 위한 라이브러리 -->
		<dependency>
		  <groupId>com.google.code.geocoder-java</groupId>
		  <artifactId>geocoder-java</artifactId>
		  <version>0.16</version>
		</dependency>
		
		<!-- 이메일 인증 관련 dependency -->
		<dependency>
		    <groupId>javax.mail</groupId>
		    <artifactId>mail</artifactId>
		    <version>1.4.7</version>
		</dependency>
		
		<!-- 이메일 관련 dependency -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context-support</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
				<!-- 첨부파일 START-->
		<!-- MultipartHttpServletRequset -->
		 <dependency>
			 <groupId>commons-io</groupId>
			 <artifactId>commons-io</artifactId>
			 <version>2.0.1</version>
		 </dependency>
		 
		 <dependency>
			 <groupId>commons-fileupload</groupId>
			 <artifactId>commons-fileupload</artifactId>
			 <version>1.4</version>
		 </dependency>
		
		<!-- 첨부파일 END -->
		
	</dependencies>
	


	<!-- - build : 추가적으로 이용하고자 하는 플러그인들을 정의하는 부분 -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.3.2</version>
			</plugin>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>
							org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>
							org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>

					<!-- java 버전을 결정하는 부분 -->
					<!-- ${java-version}로 수정함 -->
					<source>${java-version}</source>
					<target>${java-version}</target>
					<!-- java 버전을 결정하는 부분 -->

					<compilerArgument>-Xlint:all</compilerArgument>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<configuration>
					<mainClass>org.test.int1.Main</mainClass>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
